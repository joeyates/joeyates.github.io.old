<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Joe Yates' Blog]]></title>
  <link href="http://joeyates.info/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://joeyates.info/"/>
  <updated>2018-12-16T10:03:11+01:00</updated>
  <id>http://joeyates.info/</id>
  <author>
    <name><![CDATA[Joe Yates]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Forward Blocks in Ruby]]></title>
    <link href="http://joeyates.info/2014/06/30/how-to-forward-blocks-in-ruby/"/>
    <updated>2014-06-30T09:51:19+02:00</updated>
    <id>http://joeyates.info/2014/06/30/how-to-forward-blocks-in-ruby</id>
    <content type="html"><![CDATA[<h1>TL;DR</h1>

<p>Use <code>Proc.new</code></p>

<h1>Calling Enumerators - normal use</h1>

<p>You&rsquo;re writing some code which calls an Enumerator - a function that
makes repeated calls to the block of code that you provide.</p>

<pre><code class="ruby">def yield_me_2_things
  yield 'Thing 1'
  yield 'Thing 2'
end

yield_me_2_things { |x| puts x }
</code></pre>

<p>This will print:</p>

<pre><code>Thing 1
Thing 2
</code></pre>

<p>The values are supplied by <code>yield_me_2_things</code> and the printing is done in
the block, <code>{ |x| puts }</code>, that is passed to that method.</p>

<h1>Generalize</h1>

<p>I can now make a generalized method, to handle any number of things:</p>

<pre><code class="ruby">def yield_me_n_things(n)
  1.upto(n) do |i|
    thing = "Thing #{i}"
    yield thing
  end
end

yield_me_n_things(2) { |x| puts x }
</code></pre>

<p>&hellip;the output is the same.</p>

<h1>An alternative: use a block</h1>

<p>I could equally have implemented the method using a <code>&amp;block</code> parameter -
for the caller, it makes no difference:</p>

<pre><code class="ruby">def call_this_block_with_n_things(n, &amp;block)
  1.upto(n) do |i|
    thing = "Thing #{i}"
    block.call thing
  end
end

call_this_block_with_n_things(2) { |x| puts x }
</code></pre>

<p>&hellip;the output is the same.</p>

<h1>The problem</h1>

<p>What if I want one Enumerator to call another?</p>

<p>What if I want to keep the specific version (<code>yield_me_2_things</code>)
but just make it call the generalized method?</p>

<pre><code class="ruby">def enumerate_n_things(n) # How do I receive the block?
  1.upto(n) do |i|
    thing = "Thing #{i}"
    # How do I call the block?
  end
end

def enumerate_2_things
  enumerate_n_things(2) # How do I forward the block?
end

enumerate_2_things { |x| puts x }
enumerate_2_things(2) { |x| puts x }
</code></pre>

<p>How should I write the two methods, while keeping both usable indipendently?</p>

<h1>Attempt 1: Forward using yield</h1>

<p>With <code>yield</code>, you don&rsquo;t explicitly receive the block, you just call it.
Does that work across two levels? I.e., does the block get passed to method I call?</p>

<pre><code>def enumerate_n_things(n)
  1.upto(n) do |i|
    thing = "Thing #{i}"
    yield thing
  end
end

def enumerate_2_things
  enumerate_n_things(2)
end

enumerate_2_things { |x| puts x }
</code></pre>

<p>No, doesn&rsquo;t work, <code>enumerate_n_things</code> doesn&rsquo;t receive a block.</p>

<p>I get this error:
<code>
no block given (yield) (LocalJumpError)
</code></p>

<h1>Attempt 2: Forward using a block</h1>

<pre><code>def enumerate_n_things(n, block) # Note: no '&amp;'
  1.upto(n) do |i|
    thing = "Thing #{i}"
    block.call thing
  end
end

def enumerate_2_things(&amp;block)
  enumerate_n_things(2, block)
end

enumerate_2_things { |x| puts x }
</code></pre>

<p>Prints:
<code>
Thing 1
Thing 2
</code>
But we can no longer pass a block to the generalized method:
<code>
enumerate_n_things(2) { |x| puts x }
</code></p>

<p><code>enumerate_n_things</code> now expects the block as a normal parameter.</p>

<p>I get this error:
<code>
wrong number of arguments (1 for 2)
</code></p>

<h1>Solution: Proc.new</h1>

<pre><code class="ruby">def enumerate_n_things(n, block = Proc.new)
  1.upto(n) do |i|
    thing = "Thing #{i}"
    block.call thing
  end
end

def enumerate_2_things(block = Proc.new)
  enumerate_n_things(2, block)
end

enumerate_2_things { |x| puts x }
enumerate_n_things(2) { |x| puts x }
</code></pre>

<p>Both calls now work!</p>

<p><code>Proc.new</code> transforms any block passed to a method into a Proc.
If we use that as the default value for a block parameter we can
call methods directly with blocks, or forward blocks between
enumerators.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instant Sinatra Starter]]></title>
    <link href="http://joeyates.info/2013/12/29/instant-sinatra-starter/"/>
    <updated>2013-12-29T14:36:04+01:00</updated>
    <id>http://joeyates.info/2013/12/29/instant-sinatra-starter</id>
    <content type="html"><![CDATA[<p>I was asked to write a book about Sinatra, to be published by Packt Publishing.</p>

<p><img src="/images/SinatraStarterCover.png" alt="Instant Sinatra Starter" /></p>

<p>The book is called &ldquo;Instant Sinatra Starter&rdquo; and is part of Packtpub&rsquo;s Instant series.</p>

<p>Although the book is very short - the final version is 48 pages - it took about six
months from initial planning to publication.</p>

<p>My target audience is people who have a little programming experience, so it doesn&rsquo;t
aim to teach you programming in general, or Ruby specifically.</p>

<p>The main section of the book follows the steps you need to develop an address book
application.</p>

<p>The topics covered are:</p>

<ul>
<li>Sinatra setup,</li>
<li>Templating (using Slim),</li>
<li>Getting an app online using Heroku,</li>
<li>GET and POST requests,</li>
<li>Integration testing,</li>
<li>Database access.</li>
</ul>


<p>The code from the book is <a href="https://github.com/joeyates/sinatra-address-book">available on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Bareword Assignment and Method Calls With Implicit Self]]></title>
    <link href="http://joeyates.info/2012/01/16/ruby-bareword-assignment-and-method-calls-with-implicit-self/"/>
    <updated>2012-01-16T18:52:00+01:00</updated>
    <id>http://joeyates.info/2012/01/16/ruby-bareword-assignment-and-method-calls-with-implicit-self</id>
    <content type="html"><![CDATA[<h1>Problem</h1>

<p>If I do this:</p>

<p><figure class='code'><figcaption><span>Problem - problem.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="n">foo</span>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>there is always the doubt whether I&rsquo;m accessing a local variable, or calling methods <code>foo</code> and <code>foo=</code>.</p>

<h1>TL;DR</h1>

<p>When you want to call an instance&rsquo;s own methods, use <code>self</code>:</p>

<p><figure class='code'><figcaption><span>TL;DR - tldr.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">foo</span>             <span class="c1"># Calls foo</span>
</span><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">foo</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">bar</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>     <span class="c1"># Calls foo=</span>
</span></code></pre></td></tr></table></div></figure></p>

<!--more-->


<h1>Example 1</h1>

<p><figure class='code'><figcaption><span>Example 1 - example_1.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">example1</span>
</span><span class='line'> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">example1</span> <span class="nb">method</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;example1 #=&gt; &amp;ldquo;example1 method&amp;rdquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">example1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">assigned</span> <span class="n">value</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;example1 #=&gt; &amp;ldquo;assigned value&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Here, we define a method, and then make an assignment. As we assign to a bareword, Ruby creates a new local variable.</p>

<p>As soon as a value is assigned to the local variable, the method no longer gets called.</p>

<h1>Example 2</h1>

<p>But, what if we also have an assignment method?</p>

<p><figure class='code'><figcaption><span>Example 2 - example_2.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">example2</span>
</span><span class='line'> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">example2</span> <span class="nb">method</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def example2=(value)</span>
</span><span class='line'><span class="sr"> puts &amp;ldquo;example2= called&amp;rdquo; # (this never gets called)</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">example2</span> <span class="c1">#=&gt; &amp;ldquo;example2 method&amp;rdquo;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">example2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">assigned</span> <span class="n">value</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;example2 #=&gt; &amp;ldquo;assigned value&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Adding the method <code>example2=</code> does not change things. When we assign to a bareword, Ruby takes it as assignment to a local variable.</p>

<h1>Example with a Class</h1>

<p><figure class='code'><figcaption><span>x - x.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Foo</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt; attr_accessor :bar&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>   <span class="vi">@bar</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'> <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt; def method1</span>
</span><span class='line'><span class="sr">   puts bar</span>
</span><span class='line'><span class="sr"> end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">method2</span>
</span><span class='line'>   <span class="n">bar</span> <span class="o">=</span> <span class="mi">99</span>
</span><span class='line'>   <span class="nb">puts</span> <span class="n">bar</span>
</span><span class='line'> <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt; def method3</span>
</span><span class='line'><span class="sr">   bar = 99</span>
</span><span class='line'><span class="sr">   puts self.bar</span>
</span><span class='line'><span class="sr"> end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;foo = Foo.new&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">foo</span><span class="o">.</span><span class="n">bar</span>  <span class="c1">#=&gt; 42</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">method1</span> <span class="c1">#=&gt; 42</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">method2</span> <span class="c1">#=&gt; 99</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">method3</span> <span class="c1">#=&gt; 42</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>method2</code> is the problem case. <code>bar</code> is assigned to, creating a local variable, so subsequent calls to <code>bar</code> return 99.
<code>method3</code> disambiguates by explicitly calling the <code>bar</code> method on <code>self</code>.</p>

<h1>The Cause</h1>

<p>There are two things going on here:</p>

<ol>
<li>bareword assignment creates local variables,</li>
<li>local variables mask methods of the same name.</li>
</ol>


<h1>Refactoring Might Break Code</h1>

<p>One solution is to use <code>self.method</code> only in cases where local variables mask methods. The problem with this approach is that code may be altered, introducing local variables, and so altering the behaviour of following code:</p>

<h2>Original Code</h2>

<p><figure class='code'><figcaption><span>x - x.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'> <span class="kp">attr_accessor</span> <span class="ss">:bar</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt; def baz</span>
</span><span class='line'><span class="sr">   puts bar</span>
</span><span class='line'><span class="sr"> end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">foo</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">bar</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">baz</span> <span class="c1">#=&gt; 42</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Modified Code</h2>

<p><figure class='code'><figcaption><span>x - x.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:bar</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def baz</span>
</span><span class='line'><span class="sr">    bar = 99 # &amp;lt;= variable assignment introduced</span>
</span><span class='line'><span class="sr">    puts bar</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">foo</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">bar</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">baz</span> <span class="c1">#=&gt; 99</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>Solution</h1>

<p>The best solution is to always call instance methods on <code>self</code>.</p>
]]></content>
  </entry>
  
</feed>
