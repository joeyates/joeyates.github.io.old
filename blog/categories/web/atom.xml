<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | Joe Yates' Blog]]></title>
  <link href="http://joeyates.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://joeyates.github.io/"/>
  <updated>2014-01-08T13:27:58+01:00</updated>
  <id>http://joeyates.github.io/</id>
  <author>
    <name><![CDATA[Joe Yates]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compojure]]></title>
    <link href="http://joeyates.github.io/2013/12/30/compojure/"/>
    <updated>2013-12-30T22:44:31+01:00</updated>
    <id>http://joeyates.github.io/2013/12/30/compojure</id>
    <content type="html"><![CDATA[<p>I&rsquo;m interested in alternatives to Ruby for Web programming. As I like Clojure,
Compojure seems an obvious first choice.</p>

<p>I&rsquo;ve put together a basic CRUD application: an address book.
You can try it out on Heroku, and the source code is available on GitHub.</p>

<h1>Phase 1: Hello World!</h1>

<p>The first batch of files are:</p>

<ul>
<li>README</li>
<li><a href="https://github.com/joeyates/compojure-address-book/blob/d3d1d7f2cd307302db038b0b9ecb21270d1f1702/Procfile">Procfile</a> &ndash; To launch the program on Heroku,</li>
<li><a href="https://github.com/joeyates/compojure-address-book/blob/d3d1d7f2cd307302db038b0b9ecb21270d1f1702/project.clj">project.clj</a> &ndash; The program is a Leiningen project. This file has a project
description, lists dependencies and indicates the licence,</li>
<li><a href="https://github.com/joeyates/compojure-address-book/blob/d3d1d7f2cd307302db038b0b9ecb21270d1f1702/src/compojure_address_book/core.clj">src/compojure_address_book/core.clj</a> &ndash; Prints out &lsquo;Hello World!&rsquo;</li>
</ul>


<p>The entry point is <code>-main</code>, which passes the application instance to Jetty
application server, along with the port it is to be served on.</p>

<p>```clojure
(defn -main [&amp; args]
  (let [port (Integer/parseInt (get (System/getenv) &ldquo;PORT&rdquo; &ldquo;8080&rdquo;))]</p>

<pre><code>(run-jetty app {:port port})))
</code></pre>

<p>```</p>

<p>The definition of the application instance basically instantiates a site handler
with the routes we expect:</p>

<p><code>clojure
(def app
  (handler/site app-routes))
</code></p>

<p>We define one real route &lsquo;/&rsquo;, which gets you a &lsquo;Hello World&rsquo; response,
otherwise you get a page not found message:</p>

<p><code>clojure
(defroutes app-routes
  (GET "/" [] "Hello World")
  (route/not-found "Not Found"))
</code></p>
]]></content>
  </entry>
  
</feed>
